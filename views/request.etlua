<% local to_json = require("lapis.util").to_json %>
<script>
function requestBlock() {return {
	url: '<%= url_for(controller.name, params) %>',
	method: '<%= controller.methods[1] %>',
	responseJson: <%- response.json and to_json(response.json) or "null" %>,
	responseStatus: '<%= response.status %>',
	responseStatusText: '',
	requestBody: '',
	requestQuery: '',
	bodyFiles: {},
	isCodeMode: false,
	doingRequest: false,
	params: {
		<% local to_json = require("lapis.util").to_json %>
		query: {
			<% for _, method in ipairs(controller.methods) do %>
				<% local query_struct = controller:get_params_struct("query", method) %>
				<%= method %>: <%- to_json(query_struct) %>,
				<%= method %>_have: <%= next(query_struct) ~= nil %>,
			<% end %>
		},
		body: {
			<% for _, method in ipairs(controller.methods) do %>
				<% local body_struct = controller:get_params_struct("body", method) %>
				<%= method %>: <%- to_json(body_struct) %>,
				<%= method %>_have: <%= next(body_struct) ~= nil %>,
			<% end %>
		},
	},
	async doRequest() {
		this.doingRequest = true
		let response
		if (this.method != "GET") {
			const formData = new FormData()
			for (const name in this.bodyFiles) {
				formData.append(name, this.bodyFiles[name], this.bodyFiles[name].name)
			}
			formData.append('json_params', this.requestBody)
			response = await fetch(this.url + this.requestQuery.replaceAll('\n', ''), {
				method: this.method,
				body: formData,
				credentials: 'same-origin'
			})
		} else {
			response = await fetch(this.url + this.requestQuery.replaceAll('\n', ''), {
				credentials: 'same-origin'
			})
		}
		this.responseStatus = response.status
		this.responseStatusText = response.statusText

		var responseHeaders = document.getElementById('response-headers')
		responseHeaders.innerHTML = ''
		var location = null
		for (var pair of response.headers.entries()) {
			responseHeaders.innerHTML += pair[0] + ': ' + pair[1] + '\n'
			if (pair[0] == "location") {
				location = pair[1]
			}
		}
		var responseLocation = document.getElementById('response-location')
		if (location != null) {
			var url = new URL(location)
			responseLocation.href = location.replaceAll('/api', '/api/html')
			responseLocation.innerHTML = url.pathname
		} else {
			responseLocation.href = '/api/html'
			responseLocation.innerHTML = ''
		}

		let responseJson = await response.json().catch((error) => {
			console.log(error)
		})
        if (responseJson) {
			this.responseJson = responseJson
		} else {
			this.responseJson = null
		}
		this.updateEffect()
		this.doingRequest = false
	},
	updateEffect() {
		document.getElementById('response-status').value = this.responseStatus + ' ' + this.responseStatusText
		var responseBody = document.getElementById('response-body')
		if (this.responseJson != null) {
			if (!this.responseJson.err) {
				responseBody.innerHTML = JSONstringifyOrder(this.responseJson, 2)
			} else {
				responseBody.innerHTML = this.responseJson.err + '\n' + this.responseJson.trace
			}
		} else {
			responseBody.innerHTML = ''
		}
		if (this.isCodeMode) return
		this.requestBody = JSONstringifyOrder(this.params.body[this.method], 2)
		this.requestQuery = encode_get_params(this.params.query[this.method]).replaceAll('&', '&\n')
		this.updateTextarea()
	},
	updateTextarea() {
		this.$nextTick(() => {
			var reqBody = document.getElementById('request-body')
			reqBody.style.height = reqBody.scrollHeight + 3 + "px"
			var reqQuery = document.getElementById('request-query')
			reqQuery.style.height = reqQuery.scrollHeight + 3 + "px"
		})
	}
}}
</script>
<div x-data="requestBlock" x-cloak x-effect="updateEffect" x-init="updateEffect">
	<div class="field has-addons">
		<div class="control is-expanded">
			<input class="input" type="text" x-model="url" disabled>
		</div>
		<div class="control">
			<a class="button is-info" :class="doingRequest ? 'is-loading' : ''" @click="doRequest">
				send
			</a>
		</div>
	</div>

	<div class="field">
		<div class="control">
			<% for _, method in ipairs(controller.methods) do %>
				<% local disabled = controller.permited_methods[method] and "" or "disabled" %>
				<label class="radio" <%= disabled %>>
					<input type="radio" name="method" value="<%= method %>" x-model="method" <%= disabled %>>
					<%= method %>
				</label>
			<% end %>
		</div>
	</div>

	<div class="tabs" x-show="params.query[method + '_have'] > 0 || params.body[method + '_have'] > 0">
		<ul @click="updateTextarea">
			<li :class="!isCodeMode ? 'is-active' : ''" @click="isCodeMode = false"><a>form</a></li>
			<li :class="isCodeMode ? 'is-active' : ''" @click="isCodeMode = true"><a>code</a></li>
		</ul>
	</div>

	<div class="field">
		<label class="subtitle" x-show="params.query[method + '_have'] > 0">Query params</label>
	</div>
	<% for _, method in ipairs(controller.methods) do %>
		<div class="field" x-show="method == '<%= method %>' && !isCodeMode">
			<% render("views.form", {validations = controller:get_validations("query", method), model = "params.query." .. method}) %>
		</div>
	<% end %>
	<div class="field" x-show="isCodeMode && params.query[method + '_have'] > 0">
		<div class="control">
			<textarea id="request-query" class="textarea code" x-model="requestQuery" @input="updateTextarea"></textarea>
		</div>
	</div>
	<div class="field">
		<label class="subtitle" x-show="method != 'GET' && params.body[method + '_have'] > 0">Body params</label>
	</div>
	<% for _, method in ipairs(controller.methods) do %>
		<div class="field" x-show="method == '<%= method %>' && method != 'GET' && !isCodeMode">
			<% render("views.form", {validations = controller:get_validations("body", method), model = "params.body." .. method}) %>
		</div>
	<% end %>
	<div class="field" x-show="method != 'GET' && isCodeMode && params.body[method + '_have'] > 0">
		<div class="control">
			<textarea class="textarea code" x-model="requestBody" id="request-body" @input="updateTextarea"></textarea>
		</div>
	</div>
	<div class="field" x-show="method != 'GET' && isCodeMode && params.body[method + '_have'] > 0">
		<div class="control">
			<a class="button" @click="requestBody = document.getElementById('response-body').innerHTML; updateTextarea();">
				from response
			</a>
		</div>
	</div>
</div>